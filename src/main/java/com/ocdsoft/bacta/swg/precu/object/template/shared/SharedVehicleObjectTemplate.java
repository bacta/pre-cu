package com.ocdsoft.bacta.swg.precu.object.template.shared;

import bacta.iff.Iff;
import com.google.common.base.Preconditions;
import com.ocdsoft.bacta.swg.foundation.Tag;
import com.ocdsoft.bacta.swg.template.ObjectTemplate;
import com.ocdsoft.bacta.swg.template.ObjectTemplateList;
import com.ocdsoft.bacta.swg.utility.FloatParam;

/**
 * Generated by the TemplateDefinitionWriter.
 * MANUAL MODIFICATIONS MAY BE OVERWRITTEN.
 */
public class SharedVehicleObjectTemplate extends SharedTangibleObjectTemplate {
    private static final int TAG_SHAREDVEHICLEOBJECTTEMPLATE = Tag.convertStringToTag("0000");

    private int templateVersion;

    private final FloatParam[] speed = new FloatParam[]{ //how fast the vehicle moves
            new FloatParam(),
            new FloatParam(),
            new FloatParam(),
            new FloatParam(),
            new FloatParam(),
    };
    private final FloatParam slopeAversion = new FloatParam(); //?
    private final FloatParam hoverValue = new FloatParam(); //height vehicle hovers at
    private final FloatParam turnRate = new FloatParam(); //how tight the vehicle turns (?)
    private final FloatParam maxVelocity = new FloatParam(); //max speed the vehicle can move
    private final FloatParam acceleration = new FloatParam(); //vehicle acceleration
    private final FloatParam braking = new FloatParam(); //vehicle braking

    public SharedVehicleObjectTemplate(final String filename, final ObjectTemplateList objectTemplateList) {
        super(filename, objectTemplateList);
    }

    @Override
    public int getId() {
        return TAG_SHAREDVEHICLEOBJECTTEMPLATE;
    }

    public float getSpeed(MovementTypes index) {
        SharedVehicleObjectTemplate base = null;

        if (baseData != null)
            base = (SharedVehicleObjectTemplate) baseData;

        if (!speed[(int) index.value].isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSpeed(index);
            }
        }

        float value = this.speed[(int) index.value].getValue();
        final byte delta = this.speed[(int) index.value].getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSpeed(index);
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getSlopeAversion() {
        SharedVehicleObjectTemplate base = null;

        if (baseData != null)
            base = (SharedVehicleObjectTemplate) baseData;

        if (!slopeAversion.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getSlopeAversion();
            }
        }

        float value = this.slopeAversion.getValue();
        final byte delta = this.slopeAversion.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getSlopeAversion();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getHoverValue() {
        SharedVehicleObjectTemplate base = null;

        if (baseData != null)
            base = (SharedVehicleObjectTemplate) baseData;

        if (!hoverValue.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getHoverValue();
            }
        }

        float value = this.hoverValue.getValue();
        final byte delta = this.hoverValue.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getHoverValue();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getTurnRate() {
        SharedVehicleObjectTemplate base = null;

        if (baseData != null)
            base = (SharedVehicleObjectTemplate) baseData;

        if (!turnRate.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getTurnRate();
            }
        }

        float value = this.turnRate.getValue();
        final byte delta = this.turnRate.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getTurnRate();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getMaxVelocity() {
        SharedVehicleObjectTemplate base = null;

        if (baseData != null)
            base = (SharedVehicleObjectTemplate) baseData;

        if (!maxVelocity.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getMaxVelocity();
            }
        }

        float value = this.maxVelocity.getValue();
        final byte delta = this.maxVelocity.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getMaxVelocity();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getAcceleration() {
        SharedVehicleObjectTemplate base = null;

        if (baseData != null)
            base = (SharedVehicleObjectTemplate) baseData;

        if (!acceleration.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getAcceleration();
            }
        }

        float value = this.acceleration.getValue();
        final byte delta = this.acceleration.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getAcceleration();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    public float getBraking() {
        SharedVehicleObjectTemplate base = null;

        if (baseData != null)
            base = (SharedVehicleObjectTemplate) baseData;

        if (!braking.isLoaded()) {
            if (base == null) {
                return 0.0f;
            } else {
                return base.getBraking();
            }
        }

        float value = this.braking.getValue();
        final byte delta = this.braking.getDeltaType();

        if (delta == '+' || delta == '-' || delta == '_' || delta == '=') {
            float baseValue = 0;

            if (baseData != null) {
                if (base != null)
                    baseValue = base.getBraking();
            }

            if (delta == '+')
                value = baseValue + value;
            if (delta == '-')
                value = baseValue - value;
            if (delta == '=')
                value = baseValue + (float) (baseValue * (value / 100.0f));
            if (delta == '_')
                value = baseValue - (float) (baseValue * (value / 100.0f));
        }
        return value;
    }

    @Override
    protected void load(final Iff iff) {
        if (iff.getCurrentName() != TAG_SHAREDVEHICLEOBJECTTEMPLATE)
            return;

        iff.enterForm();
        templateVersion = iff.getCurrentName();

        if (templateVersion == Tag.TAG_DERV) {
            iff.enterForm();
            iff.enterChunk();
            final String baseFilename = iff.readString();
            iff.exitChunk();
            final ObjectTemplate base = objectTemplateList.fetch(baseFilename);
            Preconditions.checkNotNull(base, "was unable to load base template %s", baseFilename);
            if (baseData == base && base != null) {
                base.releaseReference();
            } else {
                if (baseData != null)
                    baseData.releaseReference();
                baseData = base;
            }
            iff.exitForm();
            templateVersion = iff.getCurrentName();
        }

        iff.enterForm();
        iff.enterChunk();
        final int paramCount = iff.readInt();
        iff.exitChunk();
        for (int i = 0; i < paramCount; ++i) {
            iff.enterChunk();
            final String parameterName = iff.readString();

            if ("".equalsIgnoreCase(parameterName)) {
                int listCount = iff.readInt();
                int j;
                for (j = 0; j < 5 && j < listCount; ++j)
                    speed[j].loadFromIff(objectTemplateList, iff);
                for (; j < listCount; ++j) {
                    final FloatParam dummy = new FloatParam();
                    dummy.loadFromIff(objectTemplateList, iff);
                }
            } else if ("".equalsIgnoreCase(parameterName)) {
                slopeAversion.loadFromIff(objectTemplateList, iff);
            } else if ("".equalsIgnoreCase(parameterName)) {
                hoverValue.loadFromIff(objectTemplateList, iff);
            } else if ("".equalsIgnoreCase(parameterName)) {
                turnRate.loadFromIff(objectTemplateList, iff);
            } else if ("".equalsIgnoreCase(parameterName)) {
                maxVelocity.loadFromIff(objectTemplateList, iff);
            } else if ("".equalsIgnoreCase(parameterName)) {
                acceleration.loadFromIff(objectTemplateList, iff);
            } else if ("".equalsIgnoreCase(parameterName)) {
                braking.loadFromIff(objectTemplateList, iff);
            } else {
                throw new IllegalStateException(String.format("Unexpected parameter %s", parameterName));
            }

            iff.exitChunk();
        }
        iff.exitForm();
    }

    public enum MovementTypes {
        MT_hover(0),
        MT_underwater(1),
        MT_ground(2),
        MT_swim(3),
        MT_walker(4);

        private static final MovementTypes[] values = values();
        public final long value;

        MovementTypes(final long value) {
            this.value = value;
        }

        public static MovementTypes from(final long value) {
            for (final MovementTypes e : values)
                if (e.value == value) return e;
            throw new IllegalArgumentException(String.format("Unknown value %d for enum MovementTypes", value));
        }
    }

}

