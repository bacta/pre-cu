"mapType","mapImpl","generic","genericClass","keyName","keyType","keySerializer","keyDeserializer","keyCreator","valueName","valueType","valueSerializer","valueDeserializer","valueCreator","containerForEachStart","containerForEachEnd"
"TByteByteMap","TByteByteHashMap","","","Bool","boolean","BufferUtil.put(buffer, key)","buffer.get() != 0","","Bool","boolean","BufferUtil.put(buffer, value)","BufferUtil.getBoolean(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TByteByteMap","TByteByteHashMap","","","Bool","boolean","BufferUtil.put(buffer, key)","buffer.get() != 0","","Byte","byte","BufferUtil.put(buffer, value)","buffer.get()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteShortMap","TByteShortHashMap","","","Bool","boolean","BufferUtil.put(buffer, key)","buffer.get() != 0","","Short","short","BufferUtil.put(buffer, value)","buffer.getShort()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteIntMap","TByteIntHashMap","","","Bool","boolean","BufferUtil.put(buffer, key)","buffer.get() != 0","","Int","int","BufferUtil.put(buffer, value)","buffer.getInt()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteLongMap","TByteLongHashMap","","","Bool","boolean","BufferUtil.put(buffer, key)","buffer.get() != 0","","Long","long","BufferUtil.put(buffer, value)","buffer.getLong()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteFloatMap","TByteFloatHashMap","","","Bool","boolean","BufferUtil.put(buffer, key)","buffer.get() != 0","","Float","float","BufferUtil.put(buffer, value)","buffer.getFloat()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteObjectMap","TByteObjectHashMap","<String>","","Bool","boolean","BufferUtil.put(buffer, key)","buffer.get() != 0","","String","String","BufferUtil.put(buffer, value)","BufferUtil.getAscii(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TByteObjectMap","TByteObjectHashMap","<V>","<V extends ByteBufferWritable>","Bool","boolean","BufferUtil.put(buffer, key)","buffer.get() != 0","","Object","V","value.writeToBuffer(buffer)","valueCreator.apply(buffer)","Function<ByteBuffer, V> valueCreator","container.forEachEntry((key, value) -> {","return true; });"
"TByteByteMap","TByteByteHashMap","","","Byte","byte","BufferUtil.put(buffer, key)","buffer.get()","","Bool","boolean","BufferUtil.put(buffer, value)","BufferUtil.getBoolean(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TByteByteMap","TByteByteHashMap","","","Byte","byte","BufferUtil.put(buffer, key)","buffer.get()","","Byte","byte","BufferUtil.put(buffer, value)","buffer.get()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteShortMap","TByteShortHashMap","","","Byte","byte","BufferUtil.put(buffer, key)","buffer.get()","","Short","short","BufferUtil.put(buffer, value)","buffer.getShort()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteIntMap","TByteIntHashMap","","","Byte","byte","BufferUtil.put(buffer, key)","buffer.get()","","Int","int","BufferUtil.put(buffer, value)","buffer.getInt()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteLongMap","TByteLongHashMap","","","Byte","byte","BufferUtil.put(buffer, key)","buffer.get()","","Long","long","BufferUtil.put(buffer, value)","buffer.getLong()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteFloatMap","TByteFloatHashMap","","","Byte","byte","BufferUtil.put(buffer, key)","buffer.get()","","Float","float","BufferUtil.put(buffer, value)","buffer.getFloat()","","container.forEachEntry((key, value) -> {","return true; });"
"TByteObjectMap","TByteObjectHashMap","<String>","","Byte","byte","BufferUtil.put(buffer, key)","buffer.get()","","String","String","BufferUtil.put(buffer, value)","BufferUtil.getAscii(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TByteObjectMap","TByteObjectHashMap","<V>","<V extends ByteBufferWritable>","Byte","byte","BufferUtil.put(buffer, key)","buffer.get()","","Object","V","value.writeToBuffer(buffer)","valueCreator.apply(buffer)","Function<ByteBuffer, V> valueCreator","container.forEachEntry((key, value) -> {","return true; });"
"TShortByteMap","TShortByteHashMap","","","Short","short","BufferUtil.put(buffer, key)","buffer.getShort()","","Bool","boolean","BufferUtil.put(buffer, value)","BufferUtil.getBoolean(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TShortByteMap","TShortByteHashMap","","","Short","short","BufferUtil.put(buffer, key)","buffer.getShort()","","Byte","byte","BufferUtil.put(buffer, value)","buffer.get()","","container.forEachEntry((key, value) -> {","return true; });"
"TShortShortMap","TShortShortHashMap","","","Short","short","BufferUtil.put(buffer, key)","buffer.getShort()","","Short","short","BufferUtil.put(buffer, value)","buffer.getShort()","","container.forEachEntry((key, value) -> {","return true; });"
"TShortIntMap","TShortIntHashMap","","","Short","short","BufferUtil.put(buffer, key)","buffer.getShort()","","Int","int","BufferUtil.put(buffer, value)","buffer.getInt()","","container.forEachEntry((key, value) -> {","return true; });"
"TShortLongMap","TShortLongHashMap","","","Short","short","BufferUtil.put(buffer, key)","buffer.getShort()","","Long","long","BufferUtil.put(buffer, value)","buffer.getLong()","","container.forEachEntry((key, value) -> {","return true; });"
"TShortFloatMap","TShortFloatHashMap","","","Short","short","BufferUtil.put(buffer, key)","buffer.getShort()","","Float","float","BufferUtil.put(buffer, value)","buffer.getFloat()","","container.forEachEntry((key, value) -> {","return true; });"
"TShortObjectMap","TShortObjectHashMap","<String>","","Short","short","BufferUtil.put(buffer, key)","buffer.getShort()","","String","String","BufferUtil.put(buffer, value)","BufferUtil.getAscii(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TShortObjectMap","TShortObjectHashMap","<V>","<V extends ByteBufferWritable>","Short","short","BufferUtil.put(buffer, key)","buffer.getShort()","","Object","V","value.writeToBuffer(buffer)","valueCreator.apply(buffer)","Function<ByteBuffer, V> valueCreator","container.forEachEntry((key, value) -> {","return true; });"
"TIntByteMap","TIntByteHashMap","","","Int","int","BufferUtil.put(buffer, key)","buffer.getInt()","","Bool","boolean","BufferUtil.put(buffer, value)","BufferUtil.getBoolean(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TIntByteMap","TIntByteHashMap","","","Int","int","BufferUtil.put(buffer, key)","buffer.getInt()","","Byte","byte","BufferUtil.put(buffer, value)","buffer.get()","","container.forEachEntry((key, value) -> {","return true; });"
"TIntShortMap","TIntShortHashMap","","","Int","int","BufferUtil.put(buffer, key)","buffer.getInt()","","Short","short","BufferUtil.put(buffer, value)","buffer.getShort()","","container.forEachEntry((key, value) -> {","return true; });"
"TIntIntMap","TIntIntHashMap","","","Int","int","BufferUtil.put(buffer, key)","buffer.getInt()","","Int","int","BufferUtil.put(buffer, value)","buffer.getInt()","","container.forEachEntry((key, value) -> {","return true; });"
"TIntLongMap","TIntLongHashMap","","","Int","int","BufferUtil.put(buffer, key)","buffer.getInt()","","Long","long","BufferUtil.put(buffer, value)","buffer.getLong()","","container.forEachEntry((key, value) -> {","return true; });"
"TIntFloatMap","TIntFloatHashMap","","","Int","int","BufferUtil.put(buffer, key)","buffer.getInt()","","Float","float","BufferUtil.put(buffer, value)","buffer.getFloat()","","container.forEachEntry((key, value) -> {","return true; });"
"TIntObjectMap","TIntObjectHashMap","<String>","","Int","int","BufferUtil.put(buffer, key)","buffer.getInt()","","String","String","BufferUtil.put(buffer, value)","BufferUtil.getAscii(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TIntObjectMap","TIntObjectHashMap","<V>","<V extends ByteBufferWritable>","Int","int","BufferUtil.put(buffer, key)","buffer.getInt()","","Object","V","value.writeToBuffer(buffer)","valueCreator.apply(buffer)","Function<ByteBuffer, V> valueCreator","container.forEachEntry((key, value) -> {","return true; });"
"TLongByteMap","TLongByteHashMap","","","Long","long","BufferUtil.put(buffer, key)","buffer.getLong()","","Bool","boolean","BufferUtil.put(buffer, value)","BufferUtil.getBoolean(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TLongByteMap","TLongByteHashMap","","","Long","long","BufferUtil.put(buffer, key)","buffer.getLong()","","Byte","byte","BufferUtil.put(buffer, value)","buffer.get()","","container.forEachEntry((key, value) -> {","return true; });"
"TLongShortMap","TLongShortHashMap","","","Long","long","BufferUtil.put(buffer, key)","buffer.getLong()","","Short","short","BufferUtil.put(buffer, value)","buffer.getShort()","","container.forEachEntry((key, value) -> {","return true; });"
"TLongIntMap","TLongIntHashMap","","","Long","long","BufferUtil.put(buffer, key)","buffer.getLong()","","Int","int","BufferUtil.put(buffer, value)","buffer.getInt()","","container.forEachEntry((key, value) -> {","return true; });"
"TLongLongMap","TLongLongHashMap","","","Long","long","BufferUtil.put(buffer, key)","buffer.getLong()","","Long","long","BufferUtil.put(buffer, value)","buffer.getLong()","","container.forEachEntry((key, value) -> {","return true; });"
"TLongFloatMap","TLongFloatHashMap","","","Long","long","BufferUtil.put(buffer, key)","buffer.getLong()","","Float","float","BufferUtil.put(buffer, value)","buffer.getFloat()","","container.forEachEntry((key, value) -> {","return true; });"
"TLongObjectMap","TLongObjectHashMap","<String>","","Long","long","BufferUtil.put(buffer, key)","buffer.getLong()","","String","String","BufferUtil.put(buffer, value)","BufferUtil.getAscii(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TLongObjectMap","TLongObjectHashMap","<V>","<V extends ByteBufferWritable>","Long","long","BufferUtil.put(buffer, key)","buffer.getLong()","","Object","V","value.writeToBuffer(buffer)","valueCreator.apply(buffer)","Function<ByteBuffer, V> valueCreator","container.forEachEntry((key, value) -> {","return true; });"
"TFloatByteMap","TFloatByteHashMap","","","Float","float","BufferUtil.put(buffer, key)","buffer.getFloat()","","Bool","boolean","BufferUtil.put(buffer, value)","BufferUtil.getBoolean(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TFloatByteMap","TFloatByteHashMap","","","Float","float","BufferUtil.put(buffer, key)","buffer.getFloat()","","Byte","byte","BufferUtil.put(buffer, value)","buffer.get()","","container.forEachEntry((key, value) -> {","return true; });"
"TFloatShortMap","TFloatShortHashMap","","","Float","float","BufferUtil.put(buffer, key)","buffer.getFloat()","","Short","short","BufferUtil.put(buffer, value)","buffer.getShort()","","container.forEachEntry((key, value) -> {","return true; });"
"TFloatIntMap","TFloatIntHashMap","","","Float","float","BufferUtil.put(buffer, key)","buffer.getFloat()","","Int","int","BufferUtil.put(buffer, value)","buffer.getInt()","","container.forEachEntry((key, value) -> {","return true; });"
"TFloatLongMap","TFloatLongHashMap","","","Float","float","BufferUtil.put(buffer, key)","buffer.getFloat()","","Long","long","BufferUtil.put(buffer, value)","buffer.getLong()","","container.forEachEntry((key, value) -> {","return true; });"
"TFloatFloatMap","TFloatFloatHashMap","","","Float","float","BufferUtil.put(buffer, key)","buffer.getFloat()","","Float","float","BufferUtil.put(buffer, value)","buffer.getFloat()","","container.forEachEntry((key, value) -> {","return true; });"
"TFloatObjectMap","TFloatObjectHashMap","<String>","","Float","float","BufferUtil.put(buffer, key)","buffer.getFloat()","","String","String","BufferUtil.put(buffer, value)","BufferUtil.getAscii(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TFloatObjectMap","TFloatObjectHashMap","<V>","<V extends ByteBufferWritable>","Float","float","BufferUtil.put(buffer, key)","buffer.getFloat()","","Object","V","value.writeToBuffer(buffer)","valueCreator.apply(buffer)","Function<ByteBuffer, V> valueCreator","container.forEachEntry((key, value) -> {","return true; });"
"TObjectByteMap","TObjectByteHashMap","<String>","","String","String","BufferUtil.put(buffer, key)","BufferUtil.getAscii(buffer)","","Bool","boolean","BufferUtil.put(buffer, value)","BufferUtil.getBoolean(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectByteMap","TObjectByteHashMap","<String>","","String","String","BufferUtil.put(buffer, key)","BufferUtil.getAscii(buffer)","","Byte","byte","BufferUtil.put(buffer, value)","buffer.get()","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectShortMap","TObjectShortHashMap","<String>","","String","String","BufferUtil.put(buffer, key)","BufferUtil.getAscii(buffer)","","Short","short","BufferUtil.put(buffer, value)","buffer.getShort()","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectIntMap","TObjectIntHashMap","<String>","","String","String","BufferUtil.put(buffer, key)","BufferUtil.getAscii(buffer)","","Int","int","BufferUtil.put(buffer, value)","buffer.getInt()","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectLongMap","TObjectLongHashMap","<String>","","String","String","BufferUtil.put(buffer, key)","BufferUtil.getAscii(buffer)","","Long","long","BufferUtil.put(buffer, value)","buffer.getLong()","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectFloatMap","TObjectFloatHashMap","<String>","","String","String","BufferUtil.put(buffer, key)","BufferUtil.getAscii(buffer)","","Float","float","BufferUtil.put(buffer, value)","buffer.getFloat()","","container.forEachEntry((key, value) -> {","return true; });"
"Map","HashMap","<String, String>","","String","String","BufferUtil.put(buffer, key)","BufferUtil.getAscii(buffer)","","String","String","BufferUtil.put(buffer, value)","BufferUtil.getAscii(buffer)","","container.keySet().stream().forEach(key -> { final String value = container.get(key);","});"
"Map","HashMap","<String, V>","<V extends ByteBufferWritable>","String","String","BufferUtil.put(buffer, key)","BufferUtil.getAscii(buffer)","","Object","V","value.writeToBuffer(buffer)","valueCreator.apply(buffer)","Function<ByteBuffer, V> valueCreator","container.keySet().stream().forEach(key -> { final V value = container.get(key);","});"
"TObjectByteMap","TObjectByteHashMap","<K>","<K extends ByteBufferWritable>","Object","K","key.writeToBuffer(buffer)","keyCreator.apply(buffer)","Function<ByteBuffer, K> keyCreator","Bool","boolean","BufferUtil.put(buffer, value)","BufferUtil.getBoolean(buffer)","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectByteMap","TObjectByteHashMap","<K>","<K extends ByteBufferWritable>","Object","K","key.writeToBuffer(buffer)","keyCreator.apply(buffer)","Function<ByteBuffer, K> keyCreator","Byte","byte","BufferUtil.put(buffer, value)","buffer.get()","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectShortMap","TObjectShortHashMap","<K>","<K extends ByteBufferWritable>","Object","K","key.writeToBuffer(buffer)","keyCreator.apply(buffer)","Function<ByteBuffer, K> keyCreator","Short","short","BufferUtil.put(buffer, value)","buffer.getShort()","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectIntMap","TObjectIntHashMap","<K>","<K extends ByteBufferWritable>","Object","K","key.writeToBuffer(buffer)","keyCreator.apply(buffer)","Function<ByteBuffer, K> keyCreator","Int","int","BufferUtil.put(buffer, value)","buffer.getInt()","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectLongMap","TObjectLongHashMap","<K>","<K extends ByteBufferWritable>","Object","K","key.writeToBuffer(buffer)","keyCreator.apply(buffer)","Function<ByteBuffer, K> keyCreator","Long","long","BufferUtil.put(buffer, value)","buffer.getLong()","","container.forEachEntry((key, value) -> {","return true; });"
"TObjectFloatMap","TObjectFloatHashMap","<K>","<K extends ByteBufferWritable>","Object","K","key.writeToBuffer(buffer)","keyCreator.apply(buffer)","Function<ByteBuffer, K> keyCreator","Float","float","BufferUtil.put(buffer, value)","buffer.getFloat()","","container.forEachEntry((key, value) -> {","return true; });"
"Map","HashMap","<K, String>","<K extends ByteBufferWritable>","Object","K","key.writeToBuffer(buffer)","keyCreator.apply(buffer)","Function<ByteBuffer, K> keyCreator","String","String","BufferUtil.put(buffer, value)","BufferUtil.getAscii(buffer)","","container.keySet().stream().forEach(key -> { final String value = container.get(key);","});"
"Map","HashMap","<K, V>","<K extends ByteBufferWritable, V extends ByteBufferWritable>","Object","K","key.writeToBuffer(buffer)","keyCreator.apply(buffer)","Function<ByteBuffer, K> keyCreator","Object","V","value.writeToBuffer(buffer)","valueCreator.apply(buffer)","Function<ByteBuffer, V> valueCreator","container.keySet().stream().forEach(key -> { final V value = container.get(key);","});"
